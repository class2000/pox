// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/pbft_consensus.proto

package pbftconsensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PBFTConsensus_RequestConsensus_FullMethodName = "/pbftconsensus.PBFTConsensus/RequestConsensus"
)

// PBFTConsensusClient is the client API for PBFTConsensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition for the PBFT Dealer
type PBFTConsensusClient interface {
	// Ryu Primary calls this to initiate consensus
	RequestConsensus(ctx context.Context, in *ConsensusRequest, opts ...grpc.CallOption) (*ConsensusResponse, error)
}

type pBFTConsensusClient struct {
	cc grpc.ClientConnInterface
}

func NewPBFTConsensusClient(cc grpc.ClientConnInterface) PBFTConsensusClient {
	return &pBFTConsensusClient{cc}
}

func (c *pBFTConsensusClient) RequestConsensus(ctx context.Context, in *ConsensusRequest, opts ...grpc.CallOption) (*ConsensusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsensusResponse)
	err := c.cc.Invoke(ctx, PBFTConsensus_RequestConsensus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBFTConsensusServer is the server API for PBFTConsensus service.
// All implementations must embed UnimplementedPBFTConsensusServer
// for forward compatibility.
//
// The service definition for the PBFT Dealer
type PBFTConsensusServer interface {
	// Ryu Primary calls this to initiate consensus
	RequestConsensus(context.Context, *ConsensusRequest) (*ConsensusResponse, error)
	mustEmbedUnimplementedPBFTConsensusServer()
}

// UnimplementedPBFTConsensusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPBFTConsensusServer struct{}

func (UnimplementedPBFTConsensusServer) RequestConsensus(context.Context, *ConsensusRequest) (*ConsensusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestConsensus not implemented")
}
func (UnimplementedPBFTConsensusServer) mustEmbedUnimplementedPBFTConsensusServer() {}
func (UnimplementedPBFTConsensusServer) testEmbeddedByValue()                       {}

// UnsafePBFTConsensusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBFTConsensusServer will
// result in compilation errors.
type UnsafePBFTConsensusServer interface {
	mustEmbedUnimplementedPBFTConsensusServer()
}

func RegisterPBFTConsensusServer(s grpc.ServiceRegistrar, srv PBFTConsensusServer) {
	// If the following call pancis, it indicates UnimplementedPBFTConsensusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PBFTConsensus_ServiceDesc, srv)
}

func _PBFTConsensus_RequestConsensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTConsensusServer).RequestConsensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFTConsensus_RequestConsensus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTConsensusServer).RequestConsensus(ctx, req.(*ConsensusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PBFTConsensus_ServiceDesc is the grpc.ServiceDesc for PBFTConsensus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBFTConsensus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbftconsensus.PBFTConsensus",
	HandlerType: (*PBFTConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestConsensus",
			Handler:    _PBFTConsensus_RequestConsensus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pbft_consensus.proto",
}

const (
	RyuReplicaLogic_CalculateAction_FullMethodName = "/pbftconsensus.RyuReplicaLogic/CalculateAction"
)

// RyuReplicaLogicClient is the client API for RyuReplicaLogic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition for the Ryu Replicas
type RyuReplicaLogicClient interface {
	// PBFT Node calls this to get deterministic action from a replica
	CalculateAction(ctx context.Context, in *CalculateActionRequest, opts ...grpc.CallOption) (*CalculateActionResponse, error)
}

type ryuReplicaLogicClient struct {
	cc grpc.ClientConnInterface
}

func NewRyuReplicaLogicClient(cc grpc.ClientConnInterface) RyuReplicaLogicClient {
	return &ryuReplicaLogicClient{cc}
}

func (c *ryuReplicaLogicClient) CalculateAction(ctx context.Context, in *CalculateActionRequest, opts ...grpc.CallOption) (*CalculateActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateActionResponse)
	err := c.cc.Invoke(ctx, RyuReplicaLogic_CalculateAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RyuReplicaLogicServer is the server API for RyuReplicaLogic service.
// All implementations must embed UnimplementedRyuReplicaLogicServer
// for forward compatibility.
//
// The service definition for the Ryu Replicas
type RyuReplicaLogicServer interface {
	// PBFT Node calls this to get deterministic action from a replica
	CalculateAction(context.Context, *CalculateActionRequest) (*CalculateActionResponse, error)
	mustEmbedUnimplementedRyuReplicaLogicServer()
}

// UnimplementedRyuReplicaLogicServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRyuReplicaLogicServer struct{}

func (UnimplementedRyuReplicaLogicServer) CalculateAction(context.Context, *CalculateActionRequest) (*CalculateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateAction not implemented")
}
func (UnimplementedRyuReplicaLogicServer) mustEmbedUnimplementedRyuReplicaLogicServer() {}
func (UnimplementedRyuReplicaLogicServer) testEmbeddedByValue()                         {}

// UnsafeRyuReplicaLogicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RyuReplicaLogicServer will
// result in compilation errors.
type UnsafeRyuReplicaLogicServer interface {
	mustEmbedUnimplementedRyuReplicaLogicServer()
}

func RegisterRyuReplicaLogicServer(s grpc.ServiceRegistrar, srv RyuReplicaLogicServer) {
	// If the following call pancis, it indicates UnimplementedRyuReplicaLogicServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RyuReplicaLogic_ServiceDesc, srv)
}

func _RyuReplicaLogic_CalculateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RyuReplicaLogicServer).CalculateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RyuReplicaLogic_CalculateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RyuReplicaLogicServer).CalculateAction(ctx, req.(*CalculateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RyuReplicaLogic_ServiceDesc is the grpc.ServiceDesc for RyuReplicaLogic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RyuReplicaLogic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbftconsensus.RyuReplicaLogic",
	HandlerType: (*RyuReplicaLogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateAction",
			Handler:    _RyuReplicaLogic_CalculateAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pbft_consensus.proto",
}
