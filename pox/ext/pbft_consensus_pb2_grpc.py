# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import pbft_consensus_pb2 as pbft__consensus__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in pbft_consensus_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PBFTConsensusStub(object):
    """The service definition for the PBFT Dealer
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestConsensus = channel.unary_unary(
                '/pbftconsensus.PBFTConsensus/RequestConsensus',
                request_serializer=pbft__consensus__pb2.ConsensusRequest.SerializeToString,
                response_deserializer=pbft__consensus__pb2.ConsensusResponse.FromString,
                _registered_method=True)
        self.ReportLinkEvent = channel.unary_unary(
                '/pbftconsensus.PBFTConsensus/ReportLinkEvent',
                request_serializer=pbft__consensus__pb2.LinkEventInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class PBFTConsensusServicer(object):
    """The service definition for the PBFT Dealer
    """

    def RequestConsensus(self, request, context):
        """Ryu Primary calls this to initiate consensus on an SDN action for a packet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportLinkEvent(self, request, context):
        """Ryu Primary calls this to report a link event to be disseminated via PBFT
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PBFTConsensusServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestConsensus': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestConsensus,
                    request_deserializer=pbft__consensus__pb2.ConsensusRequest.FromString,
                    response_serializer=pbft__consensus__pb2.ConsensusResponse.SerializeToString,
            ),
            'ReportLinkEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportLinkEvent,
                    request_deserializer=pbft__consensus__pb2.LinkEventInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pbftconsensus.PBFTConsensus', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pbftconsensus.PBFTConsensus', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PBFTConsensus(object):
    """The service definition for the PBFT Dealer
    """

    @staticmethod
    def RequestConsensus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pbftconsensus.PBFTConsensus/RequestConsensus',
            pbft__consensus__pb2.ConsensusRequest.SerializeToString,
            pbft__consensus__pb2.ConsensusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportLinkEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pbftconsensus.PBFTConsensus/ReportLinkEvent',
            pbft__consensus__pb2.LinkEventInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RyuReplicaLogicStub(object):
    """The service definition for the Ryu Replicas
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateAction = channel.unary_unary(
                '/pbftconsensus.RyuReplicaLogic/CalculateAction',
                request_serializer=pbft__consensus__pb2.CalculateActionRequest.SerializeToString,
                response_deserializer=pbft__consensus__pb2.CalculateActionResponse.FromString,
                _registered_method=True)
        self.NotifyLinkEvent = channel.unary_unary(
                '/pbftconsensus.RyuReplicaLogic/NotifyLinkEvent',
                request_serializer=pbft__consensus__pb2.LinkEventInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class RyuReplicaLogicServicer(object):
    """The service definition for the Ryu Replicas
    """

    def CalculateAction(self, request, context):
        """PBFT Node calls this to get deterministic action from a replica for a packet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyLinkEvent(self, request, context):
        """PBFT Node calls this to notify the replica of a consensus-agreed link event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RyuReplicaLogicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateAction': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateAction,
                    request_deserializer=pbft__consensus__pb2.CalculateActionRequest.FromString,
                    response_serializer=pbft__consensus__pb2.CalculateActionResponse.SerializeToString,
            ),
            'NotifyLinkEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyLinkEvent,
                    request_deserializer=pbft__consensus__pb2.LinkEventInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pbftconsensus.RyuReplicaLogic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pbftconsensus.RyuReplicaLogic', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RyuReplicaLogic(object):
    """The service definition for the Ryu Replicas
    """

    @staticmethod
    def CalculateAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pbftconsensus.RyuReplicaLogic/CalculateAction',
            pbft__consensus__pb2.CalculateActionRequest.SerializeToString,
            pbft__consensus__pb2.CalculateActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyLinkEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pbftconsensus.RyuReplicaLogic/NotifyLinkEvent',
            pbft__consensus__pb2.LinkEventInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
